// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: item.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_item_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_item_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_item_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_item_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_item_2eproto;
namespace core {
class Item;
class ItemDefaultTypeInternal;
extern ItemDefaultTypeInternal _Item_default_instance_;
class property;
class propertyDefaultTypeInternal;
extern propertyDefaultTypeInternal _property_default_instance_;
class relation;
class relationDefaultTypeInternal;
extern relationDefaultTypeInternal _relation_default_instance_;
}  // namespace core
PROTOBUF_NAMESPACE_OPEN
template<> ::core::Item* Arena::CreateMaybeMessage<::core::Item>(Arena*);
template<> ::core::property* Arena::CreateMaybeMessage<::core::property>(Arena*);
template<> ::core::relation* Arena::CreateMaybeMessage<::core::relation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace core {

enum relation_type : int {
  child = 0,
  secondary = 1,
  inherit = 2,
  feetable = 3,
  vartable = 4
};
bool relation_type_IsValid(int value);
constexpr relation_type relation_type_MIN = child;
constexpr relation_type relation_type_MAX = vartable;
constexpr int relation_type_ARRAYSIZE = relation_type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* relation_type_descriptor();
template<typename T>
inline const std::string& relation_type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, relation_type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function relation_type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    relation_type_descriptor(), enum_t_value);
}
inline bool relation_type_Parse(
    const std::string& name, relation_type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<relation_type>(
    relation_type_descriptor(), name, value);
}
// ===================================================================

class property :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:core.property) */ {
 public:
  property();
  virtual ~property();

  property(const property& from);
  property(property&& from) noexcept
    : property() {
    *this = ::std::move(from);
  }

  inline property& operator=(const property& from) {
    CopyFrom(from);
    return *this;
  }
  inline property& operator=(property&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const property& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const property* internal_default_instance() {
    return reinterpret_cast<const property*>(
               &_property_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(property& a, property& b) {
    a.Swap(&b);
  }
  inline void Swap(property* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline property* New() const final {
    return CreateMaybeMessage<property>(nullptr);
  }

  property* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<property>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const property& from);
  void MergeFrom(const property& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(property* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "core.property";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_item_2eproto);
    return ::descriptor_table_item_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCodeFieldNumber = 2,
    kUnitFieldNumber = 3,
    kAmountFieldNumber = 4,
    kPriceFieldNumber = 5,
    kSummaryFieldNumber = 6,
    kCatagoryFieldNumber = 7,
  };
  // optional bytes name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string code = 2;
  bool has_code() const;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // optional bytes unit = 3;
  bool has_unit() const;
  private:
  bool _internal_has_unit() const;
  public:
  void clear_unit();
  const std::string& unit() const;
  void set_unit(const std::string& value);
  void set_unit(std::string&& value);
  void set_unit(const char* value);
  void set_unit(const void* value, size_t size);
  std::string* mutable_unit();
  std::string* release_unit();
  void set_allocated_unit(std::string* unit);
  private:
  const std::string& _internal_unit() const;
  void _internal_set_unit(const std::string& value);
  std::string* _internal_mutable_unit();
  public:

  // optional double amount = 4;
  bool has_amount() const;
  private:
  bool _internal_has_amount() const;
  public:
  void clear_amount();
  double amount() const;
  void set_amount(double value);
  private:
  double _internal_amount() const;
  void _internal_set_amount(double value);
  public:

  // optional double price = 5;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  double price() const;
  void set_price(double value);
  private:
  double _internal_price() const;
  void _internal_set_price(double value);
  public:

  // optional double summary = 6;
  bool has_summary() const;
  private:
  bool _internal_has_summary() const;
  public:
  void clear_summary();
  double summary() const;
  void set_summary(double value);
  private:
  double _internal_summary() const;
  void _internal_set_summary(double value);
  public:

  // required int32 catagory = 7;
  bool has_catagory() const;
  private:
  bool _internal_has_catagory() const;
  public:
  void clear_catagory();
  ::PROTOBUF_NAMESPACE_ID::int32 catagory() const;
  void set_catagory(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_catagory() const;
  void _internal_set_catagory(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:core.property)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unit_;
  double amount_;
  double price_;
  double summary_;
  ::PROTOBUF_NAMESPACE_ID::int32 catagory_;
  friend struct ::TableStruct_item_2eproto;
};
// -------------------------------------------------------------------

class relation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:core.relation) */ {
 public:
  relation();
  virtual ~relation();

  relation(const relation& from);
  relation(relation&& from) noexcept
    : relation() {
    *this = ::std::move(from);
  }

  inline relation& operator=(const relation& from) {
    CopyFrom(from);
    return *this;
  }
  inline relation& operator=(relation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const relation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const relation* internal_default_instance() {
    return reinterpret_cast<const relation*>(
               &_relation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(relation& a, relation& b) {
    a.Swap(&b);
  }
  inline void Swap(relation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline relation* New() const final {
    return CreateMaybeMessage<relation>(nullptr);
  }

  relation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<relation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const relation& from);
  void MergeFrom(const relation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(relation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "core.relation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_item_2eproto);
    return ::descriptor_table_item_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRelativesFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // repeated .core.Item _relatives = 2;
  int _relatives_size() const;
  private:
  int _internal__relatives_size() const;
  public:
  void clear__relatives();
  ::core::Item* mutable__relatives(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::core::Item >*
      mutable__relatives();
  private:
  const ::core::Item& _internal__relatives(int index) const;
  ::core::Item* _internal_add__relatives();
  public:
  const ::core::Item& _relatives(int index) const;
  ::core::Item* add__relatives();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::core::Item >&
      _relatives() const;

  // required .core.relation_type _type = 1;
  bool has__type() const;
  private:
  bool _internal_has__type() const;
  public:
  void clear__type();
  ::core::relation_type _type() const;
  void set__type(::core::relation_type value);
  private:
  ::core::relation_type _internal__type() const;
  void _internal_set__type(::core::relation_type value);
  public:

  // @@protoc_insertion_point(class_scope:core.relation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::core::Item > _relatives_;
  int _type_;
  friend struct ::TableStruct_item_2eproto;
};
// -------------------------------------------------------------------

class Item :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:core.Item) */ {
 public:
  Item();
  virtual ~Item();

  Item(const Item& from);
  Item(Item&& from) noexcept
    : Item() {
    *this = ::std::move(from);
  }

  inline Item& operator=(const Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline Item& operator=(Item&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Item& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Item* internal_default_instance() {
    return reinterpret_cast<const Item*>(
               &_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Item& a, Item& b) {
    a.Swap(&b);
  }
  inline void Swap(Item* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Item* New() const final {
    return CreateMaybeMessage<Item>(nullptr);
  }

  Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Item>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Item& from);
  void MergeFrom(const Item& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Item* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "core.Item";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_item_2eproto);
    return ::descriptor_table_item_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRelationsFieldNumber = 2,
    kPropsFieldNumber = 1,
  };
  // repeated .core.relation _relations = 2;
  int _relations_size() const;
  private:
  int _internal__relations_size() const;
  public:
  void clear__relations();
  ::core::relation* mutable__relations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::core::relation >*
      mutable__relations();
  private:
  const ::core::relation& _internal__relations(int index) const;
  ::core::relation* _internal_add__relations();
  public:
  const ::core::relation& _relations(int index) const;
  ::core::relation* add__relations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::core::relation >&
      _relations() const;

  // required .core.property _props = 1;
  bool has__props() const;
  private:
  bool _internal_has__props() const;
  public:
  void clear__props();
  const ::core::property& _props() const;
  ::core::property* release__props();
  ::core::property* mutable__props();
  void set_allocated__props(::core::property* _props);
  private:
  const ::core::property& _internal__props() const;
  ::core::property* _internal_mutable__props();
  public:

  // @@protoc_insertion_point(class_scope:core.Item)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::core::relation > _relations_;
  ::core::property* _props_;
  friend struct ::TableStruct_item_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// property

// optional bytes name = 1;
inline bool property::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool property::has_name() const {
  return _internal_has_name();
}
inline void property::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& property::name() const {
  // @@protoc_insertion_point(field_get:core.property.name)
  return _internal_name();
}
inline void property::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:core.property.name)
}
inline std::string* property::mutable_name() {
  // @@protoc_insertion_point(field_mutable:core.property.name)
  return _internal_mutable_name();
}
inline const std::string& property::_internal_name() const {
  return name_.GetNoArena();
}
inline void property::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void property::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:core.property.name)
}
inline void property::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:core.property.name)
}
inline void property::set_name(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:core.property.name)
}
inline std::string* property::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* property::release_name() {
  // @@protoc_insertion_point(field_release:core.property.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void property::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:core.property.name)
}

// optional string code = 2;
inline bool property::_internal_has_code() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool property::has_code() const {
  return _internal_has_code();
}
inline void property::clear_code() {
  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& property::code() const {
  // @@protoc_insertion_point(field_get:core.property.code)
  return _internal_code();
}
inline void property::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:core.property.code)
}
inline std::string* property::mutable_code() {
  // @@protoc_insertion_point(field_mutable:core.property.code)
  return _internal_mutable_code();
}
inline const std::string& property::_internal_code() const {
  return code_.GetNoArena();
}
inline void property::_internal_set_code(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void property::set_code(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:core.property.code)
}
inline void property::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:core.property.code)
}
inline void property::set_code(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:core.property.code)
}
inline std::string* property::_internal_mutable_code() {
  _has_bits_[0] |= 0x00000002u;
  return code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* property::release_code() {
  // @@protoc_insertion_point(field_release:core.property.code)
  if (!has_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return code_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void property::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:core.property.code)
}

// optional bytes unit = 3;
inline bool property::_internal_has_unit() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool property::has_unit() const {
  return _internal_has_unit();
}
inline void property::clear_unit() {
  unit_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& property::unit() const {
  // @@protoc_insertion_point(field_get:core.property.unit)
  return _internal_unit();
}
inline void property::set_unit(const std::string& value) {
  _internal_set_unit(value);
  // @@protoc_insertion_point(field_set:core.property.unit)
}
inline std::string* property::mutable_unit() {
  // @@protoc_insertion_point(field_mutable:core.property.unit)
  return _internal_mutable_unit();
}
inline const std::string& property::_internal_unit() const {
  return unit_.GetNoArena();
}
inline void property::_internal_set_unit(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  unit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void property::set_unit(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  unit_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:core.property.unit)
}
inline void property::set_unit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  unit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:core.property.unit)
}
inline void property::set_unit(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  unit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:core.property.unit)
}
inline std::string* property::_internal_mutable_unit() {
  _has_bits_[0] |= 0x00000004u;
  return unit_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* property::release_unit() {
  // @@protoc_insertion_point(field_release:core.property.unit)
  if (!has_unit()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return unit_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void property::set_allocated_unit(std::string* unit) {
  if (unit != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  unit_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unit);
  // @@protoc_insertion_point(field_set_allocated:core.property.unit)
}

// optional double amount = 4;
inline bool property::_internal_has_amount() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool property::has_amount() const {
  return _internal_has_amount();
}
inline void property::clear_amount() {
  amount_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double property::_internal_amount() const {
  return amount_;
}
inline double property::amount() const {
  // @@protoc_insertion_point(field_get:core.property.amount)
  return _internal_amount();
}
inline void property::_internal_set_amount(double value) {
  _has_bits_[0] |= 0x00000008u;
  amount_ = value;
}
inline void property::set_amount(double value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:core.property.amount)
}

// optional double price = 5;
inline bool property::_internal_has_price() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool property::has_price() const {
  return _internal_has_price();
}
inline void property::clear_price() {
  price_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double property::_internal_price() const {
  return price_;
}
inline double property::price() const {
  // @@protoc_insertion_point(field_get:core.property.price)
  return _internal_price();
}
inline void property::_internal_set_price(double value) {
  _has_bits_[0] |= 0x00000010u;
  price_ = value;
}
inline void property::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:core.property.price)
}

// optional double summary = 6;
inline bool property::_internal_has_summary() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool property::has_summary() const {
  return _internal_has_summary();
}
inline void property::clear_summary() {
  summary_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double property::_internal_summary() const {
  return summary_;
}
inline double property::summary() const {
  // @@protoc_insertion_point(field_get:core.property.summary)
  return _internal_summary();
}
inline void property::_internal_set_summary(double value) {
  _has_bits_[0] |= 0x00000020u;
  summary_ = value;
}
inline void property::set_summary(double value) {
  _internal_set_summary(value);
  // @@protoc_insertion_point(field_set:core.property.summary)
}

// required int32 catagory = 7;
inline bool property::_internal_has_catagory() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool property::has_catagory() const {
  return _internal_has_catagory();
}
inline void property::clear_catagory() {
  catagory_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 property::_internal_catagory() const {
  return catagory_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 property::catagory() const {
  // @@protoc_insertion_point(field_get:core.property.catagory)
  return _internal_catagory();
}
inline void property::_internal_set_catagory(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  catagory_ = value;
}
inline void property::set_catagory(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_catagory(value);
  // @@protoc_insertion_point(field_set:core.property.catagory)
}

// -------------------------------------------------------------------

// relation

// required .core.relation_type _type = 1;
inline bool relation::_internal_has__type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool relation::has__type() const {
  return _internal_has__type();
}
inline void relation::clear__type() {
  _type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::core::relation_type relation::_internal__type() const {
  return static_cast< ::core::relation_type >(_type_);
}
inline ::core::relation_type relation::_type() const {
  // @@protoc_insertion_point(field_get:core.relation._type)
  return _internal__type();
}
inline void relation::_internal_set__type(::core::relation_type value) {
  assert(::core::relation_type_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  _type_ = value;
}
inline void relation::set__type(::core::relation_type value) {
  _internal_set__type(value);
  // @@protoc_insertion_point(field_set:core.relation._type)
}

// repeated .core.Item _relatives = 2;
inline int relation::_internal__relatives_size() const {
  return _relatives_.size();
}
inline int relation::_relatives_size() const {
  return _internal__relatives_size();
}
inline void relation::clear__relatives() {
  _relatives_.Clear();
}
inline ::core::Item* relation::mutable__relatives(int index) {
  // @@protoc_insertion_point(field_mutable:core.relation._relatives)
  return _relatives_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::core::Item >*
relation::mutable__relatives() {
  // @@protoc_insertion_point(field_mutable_list:core.relation._relatives)
  return &_relatives_;
}
inline const ::core::Item& relation::_internal__relatives(int index) const {
  return _relatives_.Get(index);
}
inline const ::core::Item& relation::_relatives(int index) const {
  // @@protoc_insertion_point(field_get:core.relation._relatives)
  return _internal__relatives(index);
}
inline ::core::Item* relation::_internal_add__relatives() {
  return _relatives_.Add();
}
inline ::core::Item* relation::add__relatives() {
  // @@protoc_insertion_point(field_add:core.relation._relatives)
  return _internal_add__relatives();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::core::Item >&
relation::_relatives() const {
  // @@protoc_insertion_point(field_list:core.relation._relatives)
  return _relatives_;
}

// -------------------------------------------------------------------

// Item

// required .core.property _props = 1;
inline bool Item::_internal_has__props() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _props_ != nullptr);
  return value;
}
inline bool Item::has__props() const {
  return _internal_has__props();
}
inline void Item::clear__props() {
  if (_props_ != nullptr) _props_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::core::property& Item::_internal__props() const {
  const ::core::property* p = _props_;
  return p != nullptr ? *p : *reinterpret_cast<const ::core::property*>(
      &::core::_property_default_instance_);
}
inline const ::core::property& Item::_props() const {
  // @@protoc_insertion_point(field_get:core.Item._props)
  return _internal__props();
}
inline ::core::property* Item::release__props() {
  // @@protoc_insertion_point(field_release:core.Item._props)
  _has_bits_[0] &= ~0x00000001u;
  ::core::property* temp = _props_;
  _props_ = nullptr;
  return temp;
}
inline ::core::property* Item::_internal_mutable__props() {
  _has_bits_[0] |= 0x00000001u;
  if (_props_ == nullptr) {
    auto* p = CreateMaybeMessage<::core::property>(GetArenaNoVirtual());
    _props_ = p;
  }
  return _props_;
}
inline ::core::property* Item::mutable__props() {
  // @@protoc_insertion_point(field_mutable:core.Item._props)
  return _internal_mutable__props();
}
inline void Item::set_allocated__props(::core::property* _props) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete _props_;
  }
  if (_props) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      _props = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, _props, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  _props_ = _props;
  // @@protoc_insertion_point(field_set_allocated:core.Item._props)
}

// repeated .core.relation _relations = 2;
inline int Item::_internal__relations_size() const {
  return _relations_.size();
}
inline int Item::_relations_size() const {
  return _internal__relations_size();
}
inline void Item::clear__relations() {
  _relations_.Clear();
}
inline ::core::relation* Item::mutable__relations(int index) {
  // @@protoc_insertion_point(field_mutable:core.Item._relations)
  return _relations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::core::relation >*
Item::mutable__relations() {
  // @@protoc_insertion_point(field_mutable_list:core.Item._relations)
  return &_relations_;
}
inline const ::core::relation& Item::_internal__relations(int index) const {
  return _relations_.Get(index);
}
inline const ::core::relation& Item::_relations(int index) const {
  // @@protoc_insertion_point(field_get:core.Item._relations)
  return _internal__relations(index);
}
inline ::core::relation* Item::_internal_add__relations() {
  return _relations_.Add();
}
inline ::core::relation* Item::add__relations() {
  // @@protoc_insertion_point(field_add:core.Item._relations)
  return _internal_add__relations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::core::relation >&
Item::_relations() const {
  // @@protoc_insertion_point(field_list:core.Item._relations)
  return _relations_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace core

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::core::relation_type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::core::relation_type>() {
  return ::core::relation_type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_item_2eproto
